<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Dolice Lab]]></title>
  <link href="http://lab.dolice.net/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://lab.dolice.net/"/>
  <updated>2013-04-14T20:58:39+09:00</updated>
  <id>http://lab.dolice.net/</id>
  <author>
    <name><![CDATA[Masaki Hirokawa]]></name>
    <email><![CDATA[masakihirokawa@gmai.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScriptの角度取得クラス]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/16/javascript-angle/"/>
    <updated>2013-03-16T13:46:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/16/javascript-angle</id>
    <content type="html"><![CDATA[<p>JavaScriptで指定した基点からの角度を Radian型と Degree型で取得するクラス（<a href="https://github.com/masakihirokawa/js/blob/master/display/angle.js">Angle.js</a>）を作成しました。</p>

<h2>ダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/js/blob/master/display/angle.js">https://github.com/masakihirokawa/js/blob/master/display/angle.js</a></li>
</ul>


<h2>機能リスト</h2>

<ol>
<li><em>getRadian</em>: 指定した基点から目的座標までの角度をラジアン型で取得</li>
<li><em>getDegree</em>: 指定した基点から目的座標までの角度をディグリー型で取得</li>
</ol>


<h2>使用例</h2>

<p>{% codeblock lang:javascript %}
//基準座標と目標座標から角度を初期化
var angle = new Angle(criteriaX, criteriaY, aimX, aimY);
//角度をラジアン型で取得
var radian = angle.getRadian();
//角度をディグリー型で取得
var degree = angle.getDegree();
{% endcodeblock %}</p>

<h2>ソースコード</h2>

<p>{% codeblock lang:javascript %}
var Angle = function(criteriaX, criteriaY, aimX, aimY) {
  this.nMouseX = aimX - criteriaX;
  this.nMouseY = aimY - criteriaY;
  this.nRadian = Math.atan2(this.nMouseY, this.nMouseX);
  this.nDegree = this.nRadian / (Math.PI / 180);
  this.nAngle = (this.nRadian * (180 / Math.PI) + 360) % 360;
}
Angle.prototype.getRadian = function() {
  return (this.nRadian);
}
Angle.prototype.getDegree = function() {
  return (this.nDegree);
}
Angle.prototype.getAngle = function() {
  return (this.nAngle);
}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScriptの乱数生成クラス]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/16/javascript-randomize/"/>
    <updated>2013-03-16T13:21:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/16/javascript-randomize</id>
    <content type="html"><![CDATA[<p>JavaScriptで乱数を生成するクラス（<a href="https://github.com/masakihirokawa/js/blob/master/util/randomize.js">Randomize.js</a>）を作成しました。</p>

<p>各インスタンスの機能は以下の通りです。</p>

<h2>ダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/js/blob/master/util/randomize.js">https://github.com/masakihirokawa/js/blob/master/util/randomize.js</a></li>
</ul>


<h2>機能リスト</h2>

<ol>
<li><em>shuffleArray</em>: 配列をシャッフルし取得</li>
<li><em>shuffle</em>: 指定した範囲内の数列をシャッフルし取得</li>
<li><em>exact</em>: 指定したナンバー以外の乱数を取得</li>
<li><em>range</em>: 指定した範囲内の数列から乱数を取得</li>
</ol>


<h2>使用方法</h2>

<h3>myArrayの要素をシャッフルし、shuffledArrayへ代入する</h3>

<p>{% codeblock lang:javascript %}
var myArray = [1, 3, 5, 7, 9]
var shuffledArray = Randomize.shuffleArray(myArray);
{% endcodeblock %}</p>

<h3>1～12までの数値をシャッフルし、12個の要素を持つ配列として shuffledArrayへ代入する</h3>

<p>{% codeblock lang:javascript %}
var shuffledArray = Randomize.shuffle(1, 12);
{% endcodeblock %}</p>

<h3>1～12までの乱数を取得し、myUintへ代入する(ただし 第1引数に渡した 3は返らない)</h3>

<p>{% codeblock lang:javascript %}
var myUint = Randomize.exact(3, 1, 12);
{% endcodeblock %}</p>

<h3>1～12までの乱数を取得し、myUintへ代入する</h3>

<p>{% codeblock lang:javascript %}
var myUint = Randomize.range(1, 12);
{% endcodeblock %}</p>

<h2>ソースコード</h2>

<p>{% codeblock lang:javascript %}
var Randomize = {
  shuffleList : [],
  shuffleNum : 0,
  tmpList : [],
  tmpId : 0,
  shuffleArray : function(arr) {</p>

<pre><code>Randomize.shuffleList = arr;
Randomize.shuffleNum = Randomize.shuffleList.length;
while(Randomize.shuffleNum) {
  this._m = Math.floor(Math.random() * Randomize.shuffleNum);
  this._n = Randomize.shuffleList[--Randomize.shuffleNum];
  Randomize.shuffleList[Randomize.shuffleNum] = Randomize.shuffleList[this._m];
  Randomize.shuffleList[this._m] = this._n;
}
return (Randomize.shuffleList);
</code></pre>

<p>  },
  shuffle : function(min, max) {</p>

<pre><code>for(var i = 0; i &lt; max; i++) {
  Randomize.tmpList[i] = i + min;
}
Randomize.shuffleList = Randomize.shuffleArray(Randomize.tmpList);
return (Randomize.shuffleList);
</code></pre>

<p>  },
  exact : function(exceptId, min, max) {</p>

<pre><code>do {
  Randomize.tmpId = Randomize.range(min, max);
} while (Randomize.tmpId == exceptId);
return (Randomize.tmpId);
</code></pre>

<p>  },
  range : function(min, max) {</p>

<pre><code>return (Math.floor(Math.random() * (max - min + 1)) + min);
</code></pre>

<p>  }
}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
