<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: objective-c | Dolice Lab]]></title>
  <link href="http://lab.dolice.net/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://lab.dolice.net/"/>
  <updated>2013-04-14T21:01:17+09:00</updated>
  <id>http://lab.dolice.net/</id>
  <author>
    <name><![CDATA[Masaki Hirokawa]]></name>
    <email><![CDATA[masakihirokawa@gmai.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CollectionViewを使わずにサムネイルをタイル状に並べる方法]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/15/download-objc-column-thumbnail-list/"/>
    <updated>2013-04-15T10:00:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/15/download-objc-column-thumbnail-list</id>
    <content type="html"><![CDATA[<p>iOS6.0から追加された CollectionViewを使わずにサムネイルをタイル状に並べるサンプルを作成しました。下記よりサンプルのダウンロードが行えます。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/objc-column-thumbnail-list">https://github.com/masakihirokawa/objc-column-thumbnail-list</a></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:objc %}</p>

<h1>import "ViewController.h"</h1>

<p>@interface ViewController ()
@end</p>

<p>@implementation ViewController</p>

<p>//サムネイルの総数
NSInteger <em>thumbnailNum = 300;
//サムネイルのファイル名を入れる配列
NSMutableArray *</em>thumbnails;
//サムネイルのファイル名接頭詞
NSString <em>_thumbnailFilePreffix = @"images";
//サムネイルのファイル名接尾詞
NSString </em><em>thumbnailFileSuffix = @"</em>thumb";
//サムネイル間のマージン
NSInteger <em>thumbnailMargin = 9;
//サムネイルの外枠の寸法
NSInteger </em>thumbnailOutlineSize = 76;
//サムネイルのボーダーを含まない寸法
NSInteger <em>thumbnailSize = 74;
//サムネイルの列の数
NSInteger </em>thumbnailColumnNum = 4;
//サムネイルの列数のカウント
NSInteger <em>thumbnailColumnCount = 0;
//サムネイルの行数のカウント
NSInteger </em>thumbnailRowCount = 0;
//サムネイルのボタンの寸法
NSInteger _buttonSize = 80;</p>

<ul>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];
//サムネイルのファイル名を配列に代入
[self setThumbnailImageResources];
//サムネイルリストを生成
  [self setThumbnailList];
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>//サムネイルのファイル名を配列に代入
- (void)setThumbnailImageResources
{
  //変更可能な配列を初期化
  <em>thumbnails = [NSMutableArray array];
  for (int i = 1; i &lt;= </em>thumbnailNum; i++) {</p>

<pre><code>//拡張子より前のファイル名を保持
[_thumbnails addObject:[NSString stringWithFormat:@"%@%@", _thumbnailFilePreffix, [NSString stringWithFormat:@"%d", i]]];
</code></pre>

<p>  }
}</p>

<p>//サムネイルリストを生成
- (void)setThumbnailList
{
  //サムネイル群を入れるスクロールビューを初期化
  UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:CGRectMake(0, 0, 320, 568)];
  int i = 0;
  for (id thumbnailName in _thumbnails) {</p>

<pre><code>//サムネイルは4列で折り返す
if (_thumbnailColumnCount == _thumbnailColumnNum) {
  _thumbnailColumnCount = 0;
  _thumbnailRowCount++;
}
//サムネイル表示
NSString *imageFile = [NSString stringWithFormat:@"%@%@", thumbnailName, _thumbnailFileSuffix];
//画像リソースの取得
UIImage *image = [self getUIImageFromResources:imageFile ext:@"png"];
UIImageView *thumbnailView = [[UIImageView alloc] initWithImage:image];
//サムネイルの寸法指定
CGRect rect = CGRectMake(_thumbnailMargin + (_thumbnailColumnCount * _thumbnailOutlineSize),
                         _thumbnailMargin + (_thumbnailRowCount * _thumbnailOutlineSize), _thumbnailSize, _thumbnailSize);
[thumbnailView setFrame:rect];
//サムネイルをタップ可能にする
thumbnailView.userInteractionEnabled = YES;
//ボタン追加
UIButton *selectButton = [UIButton buttonWithType:UIButtonTypeCustom];
selectButton.frame = CGRectMake(0, 0, _buttonSize, _buttonSize);
//ボタンのタグを代入
selectButton.tag = i;
[selectButton addTarget:self action:@selector(selectImage:)
       forControlEvents:UIControlEventTouchUpInside];
[thumbnailView addSubview:selectButton];
//スクロールビューにサムネイルを追加
[scrollView insertSubview:thumbnailView atIndex:[self.view.subviews count]];
//サムネイルの列を一つ進める
_thumbnailColumnCount++;
i++;
</code></pre>

<p>  }
  //スクロール範囲の設定
  scrollView.contentSize = CGSizeMake(320, ((<em>buttonSize) * (</em>thumbnailRowCount - 1) - (_thumbnailMargin * 2)));
  //スクロールビューをステージに追加
  [self.view addSubview:scrollView];
}</p>

<p>//サムネイルがタップされた時のイベント
- (void)selectImage:(id)sender
{
  //予め代入しておいた tagを取得するためにセレクタを代入
  UIButton <em>button = (UIButton </em>)sender;
  //予め代入しておいた tagの数値を出力
  NSLog(@"button.tag: %d", button.tag);
}</p>

<p>//画像ファイルを取得
- (UIImage <em>)getUIImageFromResources:(NSString</em>)fileName ext:(NSString<em>)ext
{
  NSString </em>path = [[NSBundle mainBundle] pathForResource:fileName ofType:ext];
  UIImage *img = [[UIImage alloc] initWithContentsOfFile:path];
  return img;
}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指定した日時から計算した日時を取得する]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/14/objc-calendar-date-by-adding-components/"/>
    <updated>2013-04-14T17:03:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/14/objc-calendar-date-by-adding-components</id>
    <content type="html"><![CDATA[<p>指定した日時を基準にして特定の日時を取得するには、「dateByAddingComponents」メソッドを使用します。以下にサンプルを作成しました。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/objc-calendar-date-by-adding-components">https://github.com/masakihirokawa/objc-calendar-date-by-adding-components</a></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:objc %}
- (void)main
{
  //現在の日時を取得する
  NSDate *currentDate = [NSDate date];
  NSLog(@"BaseDate: %@", currentDate);</p>

<p>  //30日前のオブジェクトを取得する
  NSDateComponents *components = [[NSDateComponents alloc] init];
  [components setDay: -30];</p>

<p>  //グレゴリオ暦のカレンダーを取得する
  NSCalendar *calendar;
  calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];</p>

<p>  //オブジェクトを取得する
  NSDate *date;
  date = [calendar dateByAddingComponents:components</p>

<pre><code>                               toDate:currentDate
                              options:0];
</code></pre>

<p>  NSLog(@"Before 30days: %@", date);
}
{% endcodeblock %}</p>

<h2>出力結果</h2>

<blockquote><p>BaseDate: 2013-04-14 08:10:44 +0000<br />
Before 30days: 2013-03-15 08:10:44 +0000</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[特定の日時のオブジェクトを取得する]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/14/objc-ns-calendar/"/>
    <updated>2013-04-14T09:02:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/14/objc-ns-calendar</id>
    <content type="html"><![CDATA[<p>特定の日時のオブジェクトを取得するには、NSCalendarクラスを使用します。以下にサンプルを作成しました。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/objc-ns-calendar">https://github.com/masakihirokawa/objc-ns-calendar</a></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:objc %}
- (void)main
{
  //現在のカレンダーを取得する
  NSCalendar *calendar = [NSCalendar currentCalendar];
  if (![[calendar calendarIdentifier] isEqualToString:NSGregorianCalendar]) {</p>

<pre><code>//グレゴリオ暦以外のカレンダーが使用されている
calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
</code></pre>

<p>  }</p>

<p>  //取得する日時の情報を格納したインスタンスを生成する
  NSDateComponents *components = [[NSDateComponents alloc] init];</p>

<p>  [components setYear:2013];
  [components setMonth:4];
  [components setDay:14];
  [components setHour:9];
  [components setMinute:0];
  [components setSecond:55];</p>

<p>  //日時のオブジェクトを取得する
  NSDate *date = [calendar dateFromComponents:components];
  NSLog(@"%@", date);
}
{% endcodeblock %}</p>

<h2>出力結果</h2>

<blockquote><p>2013-04-14 00:00:55 +0000</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINavigationBarに背景画像を指定する方法]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/13/download-objc-ui-navigation-bar-custom-image/"/>
    <updated>2013-04-13T18:18:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/13/download-objc-ui-navigation-bar-custom-image</id>
    <content type="html"><![CDATA[<p>Objective-Cでナビゲーションバーに背景画像を指定するサンプルを以下に作成しました。iOSのバージョンを判別し、iOS5.0以上とそれ以外でリソースの取得方法を分けています。</p>

<p>ナビゲーションバーの背景画像の寸法は、縦幅320×横幅44ピクセルで作成しています。サンプルには PSDファイルも入っていますので、お好みのデザインに編集してご使用ください。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/objc-ui-navigationbar-custom-image">https://github.com/masakihirokawa/objc-ui-navigationbar-custom-image</a></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:objc %}
- (void)initNavigationBar
{
  //ナビゲーションバーを初期化
  UINavigationBar *navigationBar = [[UINavigationBar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];
  //iOSのバージョン取得
  float systemVersion = [[[UIDevice currentDevice] systemVersion] floatValue];
  if (systemVersion >= 5.0) {</p>

<pre><code>//iOSのバージョンが5.0以上の処理
UIImage *backgroundImage = [UIImage imageNamed:@"navigationbar-background.png"];
[navigationBar setBackgroundImage:backgroundImage forBarMetrics:UIBarMetricsDefault];
</code></pre>

<p>  } else {</p>

<pre><code>//iOSのバージョンが5.0未満の処理
NSString *backgroundResource = [[NSBundle mainBundle] pathForResource:@"navigationbar-background" ofType:@"png"];
[navigationBar.layer setContents:(id)[UIImage imageWithContentsOfFile: backgroundResource].CGImage];
</code></pre>

<p>  }
  //ナビゲーションバーをステージに追加
  [self.view addSubview:navigationBar];
}
{% endcodeblock %}</p>

<h3>補足</h3>

<blockquote><p>“Receiver type 'CALayer' for instance message is a forward declaration”</p></blockquote>

<p>もし上記のエラーが発生した場合は、QuartzCoreフレームワークを読み込むと解決します。</p>

<p>{% codeblock lang:objc %}</p>

<h1>import &lt;QuartzCore/QuartzCore.h></h1>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[辞書に格納されている全てのオブジェクトを削除する]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/12/objc-dictionary-remove-all-objects/"/>
    <updated>2013-04-12T13:05:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/12/objc-dictionary-remove-all-objects</id>
    <content type="html"><![CDATA[<p>辞書に格納されている全てのオブジェクトを削除するには、「removeAllObjects」メソッドを使用します。以下にサンプルを作成しました。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/objc-dictionary-remove-all-objects">https://github.com/masakihirokawa/objc-dictionary-remove-all-objects</a></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:objc %}
- (void)main
{
  //辞書を生成する
  NSMutableDictionary *dic;
  dic = [NSMutableDictionary dictionaryWithObjectsAndKeys:</p>

<pre><code>     @"Apple", @"Key1",
     @"Banana", @"Key2",
     @"Orange", @"Key3",
     @"Lemon", @"Key4",
     @"Greaps", @"Key5",
     nil];
</code></pre>

<p>  NSLog(@"%@", dic);</p>

<p>  //オブジェクトを全て削除する
  [dic removeAllObjects];
  NSLog(@"%@", dic);
}
{% endcodeblock %}</p>

<h2>出力結果</h2>

<blockquote><p>dic: {<br />
"@Key1" = Apple;<br />
"@Key2" = Banana;<br />
"@Key3" = Orange;<br />
"@Key4" = Lemon;<br />
"@Key5" = Greaps;<br />
}<br />
<br />
dic : {<br />
}</p></blockquote>
]]></content>
  </entry>
  
</feed>
