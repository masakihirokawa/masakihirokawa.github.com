<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: download | Dolice Lab]]></title>
  <link href="http://lab.dolice.net/blog/categories/download/atom.xml" rel="self"/>
  <link href="http://lab.dolice.net/"/>
  <updated>2013-04-14T21:14:39+09:00</updated>
  <id>http://lab.dolice.net/</id>
  <author>
    <name><![CDATA[Masaki Hirokawa]]></name>
    <email><![CDATA[masakihirokawa@gmai.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RSSリーダーのテンプレートを作成しました]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/10/download-xcode-objc-news-reader/"/>
    <updated>2013-04-10T10:35:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/10/download-xcode-objc-news-reader</id>
    <content type="html"><![CDATA[<p>RSSリーダーのテンプレートを作成しました。ここでは Appleのニュースフィードを指定しています。画面を下方向にフリックして更新すると記事リストが表示されます。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/xcode-news-reader">https://github.com/masakihirokawa/xcode-news-reader</a></li>
</ul>


<h2>ソースコード</h2>

<h3>Item.h</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import &lt;Foundation/Foundation.h></h1>

<p>@interface Item : NSObject
@property NSString <em>title;
@property NSString </em>description;</p>

<p>@end
{% endcodeblock %}</p>

<h3>Item.m</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import "Item.h"</h1>

<p>@implementation Item</p>

<p>@end
{% endcodeblock %}</p>

<h3>MasterViewController.h</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import "item.h"</h1>

<p>@interface MasterViewController : UITableViewController <NSXMLParserDelegate></p>

<p>@end
{% endcodeblock %}</p>

<h3>MasterViewController.m</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import "MasterViewController.h"</h1>

<h1>import "DetailViewController.h"</h1>

<p>@interface MasterViewController () {
  NSMutableArray <em>_items;
  Item </em><em>item;
  NSXMLParser *</em>parser;
  NSString *_elementName;
}
@end</p>

<p>@implementation MasterViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];
  // Do any additional setup after loading the view, typically from a nib.
UIRefreshControl *refreshControl = [[UIRefreshControl alloc] init];
[refreshControl addTarget:self</p>

<pre><code>               action:@selector(startDownload)
     forControlEvents:UIControlEventValueChanged];
</code></pre>

<p>self.refreshControl = refreshControl;
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
// Dispose of any resources that can be recreated.
}</p></li>
<li><p>(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
return 1;
}</p></li>
<li><p>(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
return _items.count;
}</p></li>
<li><p>(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath
{
UITableViewCell </em>cell = [tableView dequeueReusableCellWithIdentifier:@"Cell" forIndexPath:indexPath];</p>

<p>Item *item = _items[indexPath.row];
cell.textLabel.text = [item title];
return cell;
}</p></li>
<li><p>(void)prepareForSegue:(UIStoryboardSegue <em>)segue sender:(id)sender
{
if ([[segue identifier] isEqualToString:@"showDetail"]) {
  NSIndexPath </em>indexPath = [self.tableView indexPathForSelectedRow];
  Item *item = _items[indexPath.row];
  [[segue destinationViewController] setDetailItem:item];
}
}</p></li>
<li><p>(void)startDownload
{
_items = [[NSMutableArray alloc] init];
//Appleのニュースフィードを指定
NSString <em>feed = @"http://www.apple.com/jp/main/rss/hotnews/hotnews.rss";
NSURL </em>url = [NSURL URLWithString:feed];
NSURLRequest <em>request = [NSURLRequest requestWithURL:url];
NSOperationQueue </em>queue = [[NSOperationQueue alloc] init];
[NSURLConnection sendAsynchronousRequest:request</p>

<pre><code>                               queue:queue
                   completionHandler:
</code></pre>

<p> ^(NSURLResponse <em>response, NSData </em>data, NSError *error){
   <em>parser = [[NSXMLParser alloc] initWithData:data];
   </em>parser.delegate = self;
   [_parser parse];
 }];
}</p></li>
<li><p>(void)parser:(NSXMLParser <em>)parser
didStartElement:(NSString </em>)elementName
namespaceURI:(NSString <em>)namespaceURI
qualifiedName:(NSString </em>)qName
  attributes:(NSDictionary *)attributeDict
{
<em>elementName = elementName;
if ([</em>elementName isEqualToString:@"item"]) {
  <em>item = [[Item alloc] init];
  </em>item.title = @"";
  _item.description = @"";
}
}</p></li>
<li><p>(void)parser:(NSXMLParser <em>)parser
foundCharacters:(NSString </em>)string
{
if ([<em>elementName isEqualToString:@"title"]) {
  </em>item.title = [<em>item.title stringByAppendingString:string];
} else if ([</em>elementName isEqualToString:@"description"]){
  <em>item.description = [</em>item.description stringByAppendingString:string];
}
}</p></li>
<li><p>(void)parser:(NSXMLParser <em>)parser
didEndElement:(NSString </em>)elementName
namespaceURI:(NSString <em>)namespaceURI
qualifiedName:(NSString </em>)qName
{
if ([elementName isEqualToString:@"item"]) {
  [<em>items addObject:</em>item];
}
}</p></li>
<li><p>(void)parserDidEndDocument:(NSXMLParser *)parser
{
dispatch_async(dispatch_get_main_queue(), ^{
  [self.refreshControl endRefreshing];
  [self.tableView reloadData];
});
}
@end
{% endcodeblock %}</p></li>
</ul>


<h3>DetailViewController.h</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface DetailViewController : UIViewController</p>

<p>@property (strong, nonatomic) id detailItem;
@property (weak, nonatomic) IBOutlet UITextView *textView;</p>

<p>@end
{% endcodeblock %}</p>

<h3>DetailViewController.m</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import "DetailViewController.h"</h1>

<p>@implementation DetailViewController</p>

<ul>
<li><p>(void)configureView
{
if (self.detailItem) {
  self.title = [self.detailItem title];
  self.textView.text = [self.detailItem description];
}
}</p></li>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];
[self configureView];
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>@end
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[画像のスライドショーテンプレート]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/08/download-xcode-objc-slide-show/"/>
    <updated>2013-04-08T20:43:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/08/download-xcode-objc-slide-show</id>
    <content type="html"><![CDATA[<p>Objective-Cで画像をスライドショー表示するテンプレートを作成しました。タイマーで一定秒数が経過する毎に新しい画像をフェードインしています。</p>

<p>下記よりサンプルのダウンロードが行えます。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/objc-slide-show">https://github.com/masakihirokawa/objc-slide-show</a></li>
</ul>


<h2>ソースコード</h2>

<h3>ViewController.h</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface ViewController : UIViewController</p>

<p>@property (strong, nonatomic) UIImageView <em>imageView;
@property (nonatomic) NSMutableArray </em>slideShowImages;
@property (nonatomic) int slideShowImageNum;
@property (nonatomic) NSTimer *slideShowTimer;
@property (nonatomic) float slideShowTimerInterval;
@property (nonatomic) float slideShowFadeInDuration;
@property (nonatomic) int currentImageIndex;
@property (nonatomic) int imageWidth;
@property (nonatomic) int imageHeight;
@property (nonatomic) BOOL isRunningSlideShow;</p>

<p>@end
{% endcodeblock %}</p>

<h3>ViewController.m</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import "ViewController.h"</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];
//スライドショーの設定
[self initSlideShowImages];
//スライドショーで表示する画像を初期化
[self initSlideShowImageView];
//スライドショー開始
[self startSlideShow];
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
}</p></li>
</ul>


<p>//スライドショーで表示するイメージを初期化
- (void)initSlideShowImages
{
  //スライドショーで使用する画像タイトル定義
  self.slideShowImages = [NSArray arrayWithObjects:</p>

<pre><code>                      @"Pandora",
                      @"Rain",
                      @"Echidna",
                      @"Heimatlos",
                      @"Hesychasm",
                      @"Asymmetry",
                      @"Loki",
                      @"El",
                      @"Frigg",
                      @"Beelzebub",
                      @"Hirume",
                      @"Hera",
                      @"Nyx",
                      @"Maldoror",
                      @"7thVision",
                      @"MariaMagdalena",
                      @"Sarah",
                      @"AngelsBone",
                      @"Isthar",
                      @"Lilit",
                      @"Icon",
                      @"cintaamaNicakra",
                      @"samanta-bhadra",
                      nil];
</code></pre>

<p>  //総画像ファイル数を取得
  self.slideShowImageNum = [self.slideShowImages count] - 1;
  //最初に表示する画像IDを設定
  self.currentImageIndex = 0;
  //スライドが切り替わる秒数を設定
  self.slideShowTimerInterval = 5.0f;
  //フェードイン秒数
  self.slideShowFadeInDuration = 0.3;
  //画像の横幅
  self.imageWidth = 320;
  //画像の縦幅
  self.imageHeight = 568;
}</p>

<p>//スライドショーで表示するイメージを配置
- (void)initSlideShowImageView
{
  //UIImageViewを初期化
  self.imageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, self.imageWidth, self.imageHeight)];
  //UIImageViewに画像を表示
  self.imageView.image = [self getUIImageFromResources:[self.slideShowImages objectAtIndex:self.currentImageIndex] ext:@"jpg"];
  //UIImageViewを UIViewに乗せる
  UIView *slideShowView = [[UIView alloc] init];
  slideShowView = self.imageView;
  //ステージに配置
  [self.view addSubview:slideShowView];
}</p>

<p>//スライドショーを開始する
- (void)startSlideShow
{
  //既にスライドショーが再生中であれば実行しない
  if (self.isRunningSlideShow) {</p>

<pre><code>return;
</code></pre>

<p>  }
  //最後の画像になったらIDをリセットする
  if ([self isLastImage]) {</p>

<pre><code>self.currentImageIndex = -1;
</code></pre>

<p>  }
  //スライドショーのタイマー定義
  self.slideShowTimer = [NSTimer scheduledTimerWithTimeInterval:self.slideShowTimerInterval</p>

<pre><code>                                                     target:self
                                                   selector:@selector(nextSlideShow:)
                                                   userInfo:nil
                                                    repeats:YES];
</code></pre>

<p>  //スライドショー再生中フラグ
  self.isRunningSlideShow = YES;
}</p>

<p>//スライドショーで次の写真を表示する
- (void)nextSlideShow:(NSTimer*)timer
{
  //最後の画像になったらIDをリセットする
  if ([self isLastImage]) {</p>

<pre><code>self.currentImageIndex = -1;
</code></pre>

<p>  }
  //次の画像を表示
  [self changeToNextImage];
}</p>

<p>//次の画像へ切り替える
- (void)changeToNextImage
{
  //画像IDを送る
  self.currentImageIndex++;
  //画像ファイル名をセット
  NSString *imageTitle = [NSString stringWithFormat:@"%@", [self.slideShowImages objectAtIndex:self.currentImageIndex]];
  self.imageView.image = [self getUIImageFromResources:imageTitle ext:@"jpg"];
  //フェードイン開始
  <em>imageView.alpha = 0;
  [UIView beginAnimations:@"fadeIn" context:nil];
  [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
  [UIView setAnimationDuration:self.slideShowFadeInDuration];
  </em>imageView.alpha = 1;
  [UIView commitAnimations];
}</p>

<p>//スライドショーを停止する
- (void)stopSlideShow
{
  [self.slideShowTimer invalidate];
  self.isRunningSlideShow = NO;
}</p>

<p>//スライドショーイベントの呼び出し
- (void)callSlideShow
{
  if (self.isRunningSlideShow) {</p>

<pre><code>[self stopSlideShow];
</code></pre>

<p>  } else {</p>

<pre><code>[self startSlideShow];
</code></pre>

<p>  }
  self.isRunningSlideShow = !self.isRunningSlideShow;
}</p>

<p>//最後のイメージであるか
- (BOOL)isLastImage
{
  return (self.slideShowImageNum &lt;= self.currentImageIndex);
}</p>

<p>//画像ファイルを取得
- (UIImage <em>)getUIImageFromResources:(NSString</em>)fileName ext:(NSString<em>)ext
{
  NSString </em>path = [[NSBundle mainBundle] pathForResource:fileName ofType:ext];
  UIImage *img = [[UIImage alloc] initWithContentsOfFile:path];
  return img;
}
{% endcodeblock %}</p>

<h2>スライドショーイベントの呼び出し</h2>

<p>再生ボタンで制御する場合は、以下のメソッドをイベントとして呼ぶ事で動作します。</p>

<p>{% codeblock lang:objc %}
- (void)callSlideShow
{
  if (self.isRunningSlideShow) {</p>

<pre><code>[self stopSlideShow];
</code></pre>

<p>  } else {</p>

<pre><code>[self startSlideShow];
</code></pre>

<p>  }
  self.isRunningSlideShow = !self.isRunningSlideShow;
}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-Cでコマ送りアニメーションを実行するクラス]]></title>
    <link href="http://lab.dolice.net/blog/2013/04/06/download-xcode-objc-frame-by-frame-animation/"/>
    <updated>2013-04-06T00:35:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/04/06/download-xcode-objc-frame-by-frame-animation</id>
    <content type="html"><![CDATA[<p><img src="http://lab.dolice.net/images/article/frame-by-frame-animation.jpg" alt="" /></p>

<p>Objective-Cでコマ送りアニメーションを実行するためのクラスを作成しました。</p>

<p>「アニメーションの総フレーム数」、「画像ファイル名の接頭詞」、「アニメーション秒数」、「アニメーションリピート回数」の順にパラメータを渡して使用します。</p>

<p>下記よりサンプルのダウンロードが行えます。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/objc-frame-by-frame-animation">https://github.com/masakihirokawa/objc-frame-by-frame-animation</a></li>
</ul>


<h2>ソースコード</h2>

<h3>ViewController.m</h3>

<p>{% codeblock lang:objc %}
- (void)viewDidLoad
{
  [super viewDidLoad];
  //アニメーション開始</p>

<pre><code>[self startAnimationImage];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
}</p></li>
<li><p>(void)startAnimationImage
{
//画像のサイズと座標を定義
NSInteger imageWidth = 85;
NSInteger imageHeight = 120;
NSInteger imageX = (self.view.frame.size.width / 2) - (imageWidth / 2);
NSInteger imageY = (self.view.frame.size.height / 2) - (imageHeight / 2);
CGRect rect = CGRectMake(imageX, imageY, imageWidth, imageHeight);
//FrameByFrameAnimatonクラス初期化
FrameByFrameAnimation <em>fbfAnimation = [[FrameByFrameAnimation alloc] init];
//imageViewを初期化
UIImageView </em>animationImageView = [[UIImageView alloc] initWithFrame:rect];
//FrameByFrameAnimationクラスの setAnimatingクラス呼び出し
//UIImageView, 総フレーム数, 画像ファイル名の接頭詞, アニメーション秒数, アニメーションリピート回数の順にパラメータを渡す
[fbfAnimation setAnimating:animationImageView:14:@"frame":1.0:0];
//アニメーション開始
[animationImageView startAnimating];
//animationImageViewをステージに追加
[self.view addSubview:animationImageView];
}
{% endcodeblock %}</p></li>
</ul>


<h3>FrameByFrameAnimation.h</h3>

<p>{% codeblock lang:objc %}
- (NSArray <em>)animationImages:(NSMutableArray </em>)animationImageNameList;
- (void)setAnimating:(UIImageView <em>)animationImageView :(int)animationImageNum :(NSString </em>)animationImageSuffix :(float)animationDuration :(int)animationRepeatCount;
+ (UIImage <em>)getUIImageFromResources:(NSString</em>)fileName ext:(NSString*)ext;
{% endcodeblock %}</p>

<h3>FrameByFrameAnimation.m</h3>

<p>{% codeblock lang:objc %}
//画像ファイル名を配列で取得する
- (NSArray <em>)animationImages:(NSMutableArray </em>)animationImageNameList
{
  NSMutableArray *imageArray = [NSMutableArray array];
  for (int i = 0; i &lt; animationImageNameList.count; i++) {</p>

<pre><code>NSString *imageTitle = [animationImageNameList objectAtIndex:i];
//画像の配列に画像ファイルを追加
[imageArray addObject:[FrameByFrameAnimation getUIImageFromResources:imageTitle ext:@"png"]];
</code></pre>

<p>  }
  return (imageArray);
}</p>

<p>//アニメーション設定
- (void)setAnimating:(UIImageView <em>)animationImageView :(int)animationImageNum :(NSString </em>)animationImageSuffix :(float)animationDuration :(int)animationRepeatCount
{
  //アニメーションフレームを配列に入れる
  NSMutableArray *animationImageArray = [NSMutableArray array];
  for (int i = 1; i &lt;= animationImageNum; i++) {</p>

<pre><code>[animationImageArray addObject:[NSString stringWithFormat:@"%@%@", animationImageSuffix, [NSString stringWithFormat:@"%d", i]]];
</code></pre>

<p>  }
  animationImageView.animationImages = [self animationImages:animationImageArray];
  //アニメーションの秒数とリピート数を設定
  animationImageView.animationDuration = animationDuration;
  animationImageView.animationRepeatCount = animationRepeatCount;
  //アニメーション終了時のメソッド定義
  [self performSelector:@selector(animationDidFinish:) withObject:nil</p>

<pre><code>         afterDelay:animationImageView.animationDuration];
</code></pre>

<p>}</p>

<p>//アニメーション終了時のメソッド
- (void)animationDidFinish:(SEL)selector
{
  NSLog(@"Animation is complete");
}</p>

<p>//画像ファイルを取得
+ (UIImage <em>)getUIImageFromResources:(NSString</em>)fileName ext:(NSString<em>)ext
{
  NSString </em>path = [[NSBundle mainBundle] pathForResource:fileName ofType:ext];
  UIImage *img = [[UIImage alloc] initWithContentsOfFile:path];
  return img;
}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSブラウザのサンプル]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/30/download-xcode-objc-browser/"/>
    <updated>2013-03-30T19:36:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/30/download-xcode-objc-browser</id>
    <content type="html"><![CDATA[<p>ブラウザのサンプルを以下に作成しました。アドレスバーに URLを入力すると、指定したウェブサイトが開きます。とてもシンプルな機能のブラウザサンプルです。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/xcode-simple-browser">https://github.com/masakihirokawa/xcode-simple-browser</a></li>
</ul>


<h2>ソースコード</h2>

<h3>ViewController.h</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<p>@interface ViewController : UIViewController</p>

<p>@property (weak, nonatomic) IBOutlet UIWebView *webView;</p>

<ul>
<li>(IBAction)showWebSite:(UITextField *)sender;</li>
</ul>


<p>@end
{% endcodeblock %}</p>

<h3>ViewController.m</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import "ViewController.h"</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
}</p></li>
<li><p>(IBAction)showWebSite:(UITextField <em>)sender {
NSURL </em>url = [NSURL URLWithString:sender.text];
NSURLRequest *request = [NSURLRequest requestWithURL:url];
[self.webView loadRequest:request];
}</p></li>
</ul>


<p>@end
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[アプリから Facebook/Twitterに投稿するサンプル]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/30/download-xcode-objc-post-to-sns/"/>
    <updated>2013-03-30T19:27:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/30/download-xcode-objc-post-to-sns</id>
    <content type="html"><![CDATA[<p>Facebookや Twitter等の SNSへ投稿するアプリのサンプルを作成しました。</p>

<h2>サンプルダウンロード</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/xcode-post-to-sns">https://github.com/masakihirokawa/xcode-post-to-sns</a></li>
</ul>


<h2>必要なフレームワーク</h2>

<ul>
<li>Social.framework</li>
</ul>


<h2>ソースコード</h2>

<h3>ViewController.h</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import &lt;UIKit/UIKit.h></h1>

<h1>import &lt;Social/Social.h></h1>

<p>@interface ViewController : UIViewController</p>

<ul>
<li>(IBAction)tweet:(id)sender;</li>
<li>(IBAction)postToFacebook:(id)sender;</li>
</ul>


<p>@end
{% endcodeblock %}</p>

<h3>ViewController.m</h3>

<p>{% codeblock lang:objc %}</p>

<h1>import "ViewController.h"</h1>

<p>@interface ViewController ()</p>

<p>@end</p>

<p>@implementation ViewController</p>

<ul>
<li><p>(void)viewDidLoad
{
[super viewDidLoad];
}</p></li>
<li><p>(void)didReceiveMemoryWarning
{
[super didReceiveMemoryWarning];
}</p></li>
<li><p>(IBAction)tweet:(id)sender {
//Twitter
 SLComposeViewController* controller = [SLComposeViewController composeViewControllerForServiceType:SLServiceTypeTwitter];
 [self presentViewController:controller
 animated:YES
 completion:NULL];
}</p></li>
<li><p>(IBAction)postToFacebook:(id)sender {
//Facebook
SLComposeViewController* controller = [SLComposeViewController composeViewControllerForServiceType:SLServiceTypeFacebook];
[self presentViewController:controller</p>

<pre><code>               animated:YES
             completion:NULL];
</code></pre>

<p>}</p></li>
</ul>


<p>@end
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
