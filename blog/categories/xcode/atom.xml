<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Xcode | Dolice Lab]]></title>
  <link href="http://lab.dolice.net/blog/categories/xcode/atom.xml" rel="self"/>
  <link href="http://lab.dolice.net/"/>
  <updated>2014-01-11T16:11:40+09:00</updated>
  <id>http://lab.dolice.net/</id>
  <author>
    <name><![CDATA[Masaki Hirokawa]]></name>
    <email><![CDATA[info@dolice.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode 5でアプリアイコンのグロス効果を無効にする方法]]></title>
    <link href="http://lab.dolice.net/blog/2014/01/03/xcode5-app-icon-already-gloss-effects/"/>
    <updated>2014-01-03T18:29:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2014/01/03/xcode5-app-icon-already-gloss-effects</id>
    <content type="html"><![CDATA[<p><img src="/images/article/app_icon_gloss.png" title="アプリアイコンのグロス表現無効方法 -1-" alt="アプリアイコンのグロス表現無効方法 -1-" /></p>

<p><img src="/images/article/app_icon_gloss_2.png" title="アプリアイコンのグロス表現無効方法 -2-" alt="アプリアイコンのグロス表現無効方法 -2-" /></p>

<p>Xcode 5でアプリアイコンの光沢表現を無効にする方法を下記に記載します。iOS 7以降と iOS 6.1以前で有効です。</p>

<h2>アプリアイコンのグロス表現無効方法</h2>

<ol>
<li>「<strong>Info.plist</strong>」ファイルを開く</li>
<li>「<strong>Icon already includes gloss effects</strong>」という行を追加し、値を <strong>YES</strong>に指定する</li>
<li>「<strong>images.xcassets</strong>」→「<strong>AppIcon</strong>」の順に開き、右側のビューにある [<strong>iOS icon is pre-rendered</strong>]にチェックを入れる</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5の Provisioning Profile指定方法]]></title>
    <link href="http://lab.dolice.net/blog/2014/01/03/xcode5-select-provisioning-profile/"/>
    <updated>2014-01-03T18:15:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2014/01/03/xcode5-select-provisioning-profile</id>
    <content type="html"><![CDATA[<p><img src="/images/article/provisioning.png" title="Provisioning Profile指定方法" alt="Provisioning Profile指定方法" /></p>

<p>Xcode 5からプロビジョニングプロファイルの指定方法が変更になりましたので、下記に指定方法を記載します。</p>

<h2>プロビジョニングプロファイルの指定方法</h2>

<ol>
<li>Xcodeの「<strong>Build Settings</strong>」タブを開く</li>
<li><strong>Code Signing</strong>の下にある [<strong>Provisioning Profile</strong>]メニューから該当するプロビジョニングプロファイルを指定する</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5の Organizerから Provisioning Profilesをインストールする方法]]></title>
    <link href="http://lab.dolice.net/blog/2014/01/03/xcode5-import-provisioning-profiles/"/>
    <updated>2014-01-03T17:22:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2014/01/03/xcode5-import-provisioning-profiles</id>
    <content type="html"><![CDATA[<p><img src="/images/article/import_provisioning_profiles.png" title="Provisioning Profilesのインストール方法" alt="Provisioning Profilesのインストール方法" /></p>

<p>Xcode 5からプロビジョニングプロファイルのインストール方法が変更になりました。</p>

<p>下記にインストール手順を記載します。</p>

<h2>プロビジョニングプロファイルのインストール方法</h2>

<ol>
<li>Xcodeの「<strong>Window</strong>」メニューから Organizerを開く</li>
<li>Organizerの「<strong>Editor</strong>」メニューから、[<strong>Provisioning Profiles</strong>]→[<strong>Import Profile...</strong>]の順に進み、ファイル選択ウィンドウからインストールしたいプロビジョニングファイルを選択</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5で ARMv8 64bitアーキテクチャを無効にする方法]]></title>
    <link href="http://lab.dolice.net/blog/2014/01/03/xcode5-architectures/"/>
    <updated>2014-01-03T17:21:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2014/01/03/xcode5-architectures</id>
    <content type="html"><![CDATA[<p><img src="/images/article/64bit.png" title="ARMv8 64bitアーキテクチャの無効化" alt="ARMv8 64bitアーキテクチャの無効化" /></p>

<p>Xcode 5で新規プロジェクトを作成すると、iPhone 5Sから対応した最新の ARMv8 64bitアーキテクチャが有効化されています。</p>

<p>これに対応するアプリならこのままで良いのですが、例えば AdMobを使用する時にエラーが発生してしまいます（SDK 6.6.1時点）。</p>

<p>AdMobの SDKが対応するまで待つしかなさそうで、それまでは下記の手順で ARMv7/ARMv7Sアーキテクチャを指定する必要があります。</p>

<h2>ARMv8 64bitアーキテクチャの無効化手順</h2>

<ol>
<li>Xcodeの「<strong>Build Settings</strong>」タブを開きます</li>
<li><strong>Architectures</strong>メニューにある <strong>Standard architectures (arm7, arm7s)</strong>を選択します</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7から非推奨になった API一覧 (日本語訳)]]></title>
    <link href="http://lab.dolice.net/blog/2013/09/19/objc-deprecated-api-ios7/"/>
    <updated>2013-09-19T23:45:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/09/19/objc-deprecated-api-ios7</id>
    <content type="html"><![CDATA[<p>iOS 7から非推奨になった API一覧が Apple Developerサイトに記載されていましたので、以下に簡素な和訳リストを作成しました。アプリを iOS 7に対応する際の参考になれば幸いです。</p>

<h2>iOS 7以降の非推奨APIリスト</h2>

<ol>
<li>MapKitフレームワークの MKOverlayViewクラスとそのサブクラス</li>
<li>Audio ToolboxフレームワークのオーディオセッションAPI (代わりに AVFoundationフレームワークの AVAudioSessionクラスを推奨)</li>
<li>Core Locationフレームワークの CLRegionクラスは CLCircularRegionクラスに置き換え (ただし CLRegionクラスは座標と現在地を示すクラスとして存在し続ける)</li>
<li>CBCentralクラスの UUIDプロパティ (代わりに識別子プロパティを推奨)</li>
<li>GameKitフレームワークは既存の APIをクリーンアップし、新機能のより良いサポートを提供するため多くの非推奨APIを含む</li>
<li>UIViewControllerの wantsFullScreenLayoutプロパティ (iOS 7以降では、View Controllerは常にフルスクリーンレイアウトをサポートしているため)</li>
<li>UIColorを使用した背景テクスチャの描画</li>
<li>描画系クラスへの NSStringの使用</li>
</ol>


<h2>原文</h2>

<h3>What's New in iOS: iOS 7.0 (Deprecated APIsの項目)</h3>

<ul>
<li><a href="https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html">https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html</a></li>
</ul>


<h3>原文引用</h3>

<blockquote><p>Deprecated APIs</p>

<p>The Map Kit framework includes deprecations for the MKOverlayView class and its various subclasses. The existing overlay views have been replaced with an updated set of overlay renderer objects that descend from the MKOverlayRenderer class. For more information about the classes of this framework, see Map Kit Framework Reference.</p>

<p>The Audio Session API in the Audio Toolbox framework is deprecated. Apps should use the AVAudioSession class in the AV Foundation framework instead.</p>

<p>The CLRegion class in the Core Location framework is replaced by the CLCircularRegion class. The CLRegion class continues to exist as an abstract base class that supports both geographic and beacon regions.</p>

<p>The UUID property of the CBCentral class is deprecated. To specify the unique ID of your central objects, use the identifier property instead.</p>

<p>The Game Kit framework contains assorted deprecations intended to clean up the existing API and provide better support for new features.</p>

<p>The UIKit framework contains the following deprecations:
The wantsFullScreenLayout property of UIViewController is deprecated. In iOS 7 and later, view controllers always support full screen layout.</p>

<p>UIColor objects that provided background textures for earlier versions of iOS are gone.
Many drawing additions to the NSString class are deprecated in favor of newer variants.</p></blockquote>
]]></content>
  </entry>
  
</feed>
