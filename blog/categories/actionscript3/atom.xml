<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: actionscript3 | Dolice Lab]]></title>
  <link href="http://lab.dolice.net/blog/categories/actionscript3/atom.xml" rel="self"/>
  <link href="http://lab.dolice.net/"/>
  <updated>2013-04-14T21:01:17+09:00</updated>
  <id>http://lab.dolice.net/</id>
  <author>
    <name><![CDATA[Masaki Hirokawa]]></name>
    <email><![CDATA[masakihirokawa@gmai.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AS3で getURLの代替関数を使用する]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/13/as3-geturl/"/>
    <updated>2013-03-13T19:22:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/13/as3-geturl</id>
    <content type="html"><![CDATA[<p><img src="http://dolice.net/images/blog/getURL.gif" alt="" /></p>

<p>ActionScript3.0から僕の好きな getURL関数が使用できなくなってしまいましたので、簡素な代替関数を作成しました。</p>

<p><a href="https://github.com/masakihirokawa/as3/blob/master/net/dolice/utils/getURL.as">getURL.as</a>ファイルをダウンロード後、任意のクラスパスへ保存してご使用ください。</p>

<h2>ファイル</h2>

<ul>
<li><a href="https://github.com/masakihirokawa/as3/blob/master/net/dolice/utils/getURL.as">ダウンロード</a></li>
</ul>


<h2>使用方法</h2>

<ul>
<li><p>http://exsample.com/ を開く
{% codeblock lang:as3 %}
getURL("http://exsample.com/");
{% endcodeblock %}</p></li>
<li><p>http://exsample.com/ を新しいウィンドウで開く
{% codeblock lang:as3 %}
getURL("http://exsample.com/", "_blank");
{% endcodeblock %}</p></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:as3 %}
package net.dolice.utils{</p>

<pre><code>import flash.net.navigateToURL;
import flash.net.URLRequest;
public function getURL(url:String, target:String="_self"):void {
    if (url == null) {
        return;
    }
    try {
        navigateToURL(new URLRequest(url),target);
    } catch (error:Error) {
        return;
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AS3で配列／数値のシャッフルや乱数生成を行う「Randomize」クラス]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/13/as3-randomize/"/>
    <updated>2013-03-13T19:17:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/13/as3-randomize</id>
    <content type="html"><![CDATA[<p><img src="http://dolice.net/images/blog/Randomize.gif" alt="" /></p>

<p>ActionScript3.0で配列／数値のシャッフルや乱数生成を行う「<a href="http://dolice.net/sample/Randomize/">Randomize</a>」クラスを作成しました。</p>

<p>静的クラスメンバ“shuffleArray”は指定した配列要素の順序をシャッフルして返し、静的クラスメンバ“shuffle”は指定した範囲内の数値をシャッフルし配列として返します。((シャッフルの方式には Fisher-Yatesのアルゴリズムを使用しています))</p>

<p>静的クラスメンバ“exactRandom”は除外指定した数値以外の乱数を返し、静的クラスメンバ“range”は指定した範囲内の乱数を返します。</p>

<h2>ファイル</h2>

<ul>
<li><a href="http://dolice.net/php/dlc/dlcount.php?fname=Randomize.zip&dir=/sample/">サンプル</a></li>
<li><a href="https://github.com/masakihirokawa/as3/blob/master/net/dolice/utils/Randomize.as">ダウンロード</a></li>
</ul>


<h2>使用方法</h2>

<ul>
<li><p>myArrayの要素をシャッフルし、shuffledArrayへ代入する
{% codeblock lang:as3 %}
var myArray:Array = [1, 3, 5, 7, 9]
var shuffledArray:Array = Randomize.shuffleArray(myArray);
{% endcodeblock %}</p></li>
<li><p>1～12までの数値をシャッフルし、12個の要素を持つ配列として shuffledArrayへ代入する
{% codeblock lang:as3 %}
var shuffleMin:uint = 1;
var shuffleMax:uint = 12;
var shuffledArray:Array = Randomize.shuffle(shuffleMin, shuffleMax);
{% endcodeblock %}</p></li>
<li><p>1～12までの乱数を取得し、myUintへ代入する(ただし exceptUintと同じ数値である 1は返らない)
{% codeblock lang:as3 %}
var exceptUint:uint = 1;
var randomMin:uint = 1;
var randomMax:uint = 12;
var myUint:uint = Randomize.exactRandom(exceptUint, randomMin, randomMax);
{% endcodeblock %}</p></li>
<li><p>1～12までの乱数を取得し、myUintへ代入する
{% codeblock lang:as3 %}
var randomMin:uint = 1;
var randomMax:uint = 12;
var myUint:uint = Randomize.range(randomMin, randomMax);
{% endcodeblock %}</p></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:as3 %}
package net.dolice.utils{</p>

<pre><code>public class Randomize {
    private static var shuffleList:Array = [];
    private static var shuffleNum:uint;
    private static var tempList:Array = [];
    private static var tempInt:int;
    public static function shuffleArray(arr:Array):Array {
        Randomize.shuffleList = arr;
        Randomize.shuffleNum = Randomize.shuffleList.length;
        while (Randomize.shuffleNum) {
            var m:int = Math.floor(Math.random() * Randomize.shuffleNum);
            var n:int = Randomize.shuffleList[--Randomize.shuffleNum];
            Randomize.shuffleList[Randomize.shuffleNum] = Randomize.shuffleList[m];
            Randomize.shuffleList[m] = n;
        }
        return (Randomize.shuffleList);
    }
    public static function shuffle(shuffleMin:int, shuffleMax:int):Array {
        for (var i:uint; i&lt;shuffleMax; i++) {
            Randomize.tempList[i] = i + shuffleMin;
        }
        Randomize.shuffleList = Randomize.shuffleArray(Randomize.tempList);
        return (Randomize.shuffleList);
    }
    public static function exactRandom(exceptInt:int, randomMin:int, randomMax:int):int {
        do {
            Randomize.tempInt = Randomize.range(randomMin,randomMax);
        } while (Randomize.tempInt==exceptInt);
        return (Randomize.tempInt);
    }
    public static function range(randomMin:int, randomMax:int):int {
        var i:int = Math.floor(Math.random()*(randomMax-randomMin+1))+randomMin;
        return (i);
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AS3でオブジェクトの子にあるボタンの有効／無効を切り替える「SmartButton」クラス]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/13/as3-smart-button/"/>
    <updated>2013-03-13T19:09:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/13/as3-smart-button</id>
    <content type="html"><![CDATA[<p><img src="http://dolice.net/images/blog/SmartButton.gif" alt="" /></p>

<p>ActionScript3.0でオブジェクトの子にあるボタンの有効／無効を切り替える「<a href="http://dolice.net/sample/SmartButton/">SmartButton</a>」クラスを作成しました。</p>

<p>静的クラスメンバ“enabled”は、指定したオブジェクトの [mouseChildren]と [mouseEnabled]の値を個別に設定します。操作したいオブジェクトと、ボタンの有効／無効[Boolean]を指定して使用します。</p>

<p>静的クラスメンバ“change”は、予め配列化したメニューと、ボタンを無効にしたい配列メニューのインデックス値を指定して使用します。指定したインデックスの子にあるボタンが無効となり、それ以外のインデックスの子にあるボタンが有効になります。</p>

<p>ボタンの有効／無効を切り替えるというより、厳密には指定したオブジェクトの [mouseChildren]と [mouseEnabled]の値を true/falseに切り替えます。</p>

<h2>ファイル</h2>

<ul>
<li><a href="http://dolice.net/php/dlc/dlcount.php?fname=SmartButton.zip&dir=/sample/">サンプル</a></li>
<li><a href="https://github.com/masakihirokawa/as3/blob/master/net/dolice/utils/SmartButton.as">ダウンロード</a></li>
</ul>


<h2>使用方法</h2>

<ul>
<li><p><em>sp[Sprite]の子にあるボタンを無効化する
{% codeblock lang:as3 %}
SmartButton.enabled(</em>sp, false);
{% endcodeblock %}</p></li>
<li><p><em>sp[Sprite]の子にあるボタンを有効化する
{% codeblock lang:as3 %}
SmartButton.enabled(</em>sp, true);
{% endcodeblock %}</p></li>
<li><p>sampleMenu[Array]の1番目のインデックスの子にあるボタンを無効化し、それ以外のインデックスの子にあるボタンを有効化する
{% codeblock lang:as3 %}
var sampleMenu:Array = [sampleMenu1, sampleMenu2, sampleMenu3]
SmartButton.change(
sampleMenu, //配列メニュー
1, //ボタンを無効化したい配列要素のインデックス値
sampleMenu.length, //配列要素の総数
0 //配列要素の先頭
);
{% endcodeblock %}</p></li>
<li><p>sampleMenu[Array]の子にある全てのボタンを有効化する
{% codeblock lang:as3 %}
var sampleMenu:Array = [sampleMenu1, sampleMenu2, sampleMenu3]
SmartButton.clear(
sampleMenu, //配列メニュー
sampleMenu.length, //配列要素の総数
0 //配列要素の先頭
);
{% endcodeblock %}</p></li>
</ul>


<h2>ソースコード</h2>

<p>{% codeblock lang:as3 %}
package net.dolice.utils{</p>

<pre><code>import flash.display.Sprite;
public class SmartButton {
    private static var buttons:Array;
    private static var id:int;
    private static var length:uint;
    private static var index:uint;
    public static function change(buttons:Array,currentButtonID:int,buttonNum:uint=0,indexButtonID:uint=1):void {
        SmartButton.initialize(buttons,currentButtonID,buttonNum,indexButtonID);
        SmartButton.exec();
    }
    public static function clear(buttons:Array,buttonNum:uint=0,indexButtonID:uint=1):void {
        SmartButton.initialize(buttons,-1,buttonNum,indexButtonID);
        SmartButton.exec();
    }
    public static function enabled($scope:Sprite,b:Boolean):void {
        $scope.mouseChildren = b;
        $scope.mouseEnabled = b;
    }
    private static function initialize(buttons:Array,id:int,buttonNum:uint,indexButtonID:uint):void {
        SmartButton.buttons = buttons;
        SmartButton.id = id;
        buttonNum &lt;= 0 ? SmartButton.length = SmartButton.buttons.length:SmartButton.length = buttonNum;
        SmartButton.index = indexButtonID;
    }
    private static function exec():void {
        for (var i:uint = SmartButton.index; i &lt;= SmartButton.length; i++) {
            SmartButton.enabled(SmartButton.buttons[i],i != SmartButton.id);
        }
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AS3でオブジェクトをステージ上に相対配置する「RelativeLayout」クラス]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/13/as3-relative-layout/"/>
    <updated>2013-03-13T19:03:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/13/as3-relative-layout</id>
    <content type="html"><![CDATA[<p><img src="http://dolice.net/images/blog/RelativeLayout.gif" alt="" /></p>

<p>ActionScript3.0でオブジェクトをステージ上に相対配置する「<a href="http://dolice.net/php/dlc/dlcount.php?fname=RelativeLayout.zip&dir=/sample/">RelativeLayout</a>」クラスを作成しました。</p>

<p>ウィンドウ／ステージリサイズ時にクラスを呼び出すことで、オブジェクトを「中央」や「下付き」、「右付き」等に変更できます。オブジェクトの座標やサイズの変更も可能です。</p>

<p>ご使用の際は、ステージの伸縮を「拡大・縮小なし」、ステージの位置を「左上」に設定し、ステージリサイズ時のイベントリスナーを登録する必要があります。</p>

<h2>ファイル</h2>

<ul>
<li><a href="http://dolice.net/php/dlc/dlcount.php?fname=RelativeLayout.zip&dir=/sample/">サンプル</a></li>
<li><a href="https://github.com/masakihirokawa/as3/blob/master/net/dolice/gui/RelativeLayout.as">ダウンロード</a></li>
</ul>


<h2>使用方法</h2>

<ul>
<li><p>center_mc(MovieClip)をステージの中央に配置
{% codeblock lang:as3 %}
RelativeLayout.setPos(stage, center_mc);
{% endcodeblock %}</p></li>
<li><p>righttop_mc(MovieClip)をステージの右上に配置
{% codeblock lang:as3 %}
RelativeLayout.setPos(stage, righttop_mc, "rt");
{% endcodeblock %}</p></li>
<li><p>rightbottom_mc(MovieClip)をステージの右下へ、画面端(下)から24ピクセルの間隔を持って配置
{% codeblock lang:as3 %}
RelativeLayout.setPos(stage, rightbottom_mc, "rb", 0, 24);
{% endcodeblock %}</p></li>
<li><p>leftbottom_mc(MovieClip)をステージの左下へ、オブジェクトの横幅・縦幅を24ピクセルに強制指定して配置
{% codeblock lang:as3 %}
RelativeLayout.setPos(stage, leftbottom_mc, "lb", 0, 0, 24, 24);
{% endcodeblock %}</p></li>
<li><p>resize_mc(MovieClip)の横幅をステージの横幅に合わせる
{% codeblock lang:as3 %}
RelativeLayout.resize(resize_mc, stage.stageWidth);
{% endcodeblock %}</p></li>
<li><p>resize_mc(MovieClip)の横幅・縦幅をステージの横幅・縦幅に合わせる
{% codeblock lang:as3 %}
RelativeLayout.resize(resize_mc, stage.stageWidth, stage.stageWidth);
{% endcodeblock %}</p></li>
<li><p>point_mc(MovieClip)を、左から50ピクセル、上から100ピクセルの場所へ配置する
{% codeblock lang:as3 %}
RelativeLayout.point(point_mc, 50, 100);
{% endcodeblock %}</p></li>
<li><p>rect_mc(MovieClip)を、左から50ピクセル、上から100ピクセルの場所へ配置し、サイズを 240*400ピクセルに変更する
{% codeblock lang:as3 %}
RelativeLayout.rect(rect_mc, 50, 100, 240, 400);
{% endcodeblock %}</p></li>
</ul>


<h2>オブジェクト配置場所</h2>

<blockquote><p>中央 : "center" or "cm"<br />
上　 : "top" or "ct"<br />
右　 : "right" or "rm"<br />
下　 : "bottom" or "cb"<br />
左　 : "left" or "lm"<br />
右上 : "righttop" or "rt"<br />
右下 : "rightbottom" or "rb"<br />
左下 : "leftbottom" or "lb"<br />
左上 : "lefttop" or "lt"</p></blockquote>

<h2>ソースコード</h2>

<p>{% codeblock lang:as3 %}
package net.dolice.gui{</p>

<pre><code>import flash.display.DisplayObject;
import flash.display.Stage;
import flash.geom.Point;
import flash.geom.Rectangle;
public class RelativeLayout extends DisplayObject {
    private static var aimX:int;
    private static var aimY:int;
    private static var _x:int;
    private static var _y:int;
    private static var _width:uint;
    private static var _height:uint;
    private static var rectangle:Rectangle;
    public static function setPos(stage:Stage,$scope:DisplayObject,position:String="center",marginX:int=0,marginY:int=0,w:uint=0,h:uint=0):void {
        if ($scope == null) {
            return;
        }
        RelativeLayout.setSize($scope,w,h);
        switch (position) {
            case "center" :
            case "cm" :
                RelativeLayout.aimX = Math.floor(stage.stageWidth / 2 - RelativeLayout._width / 2) + marginX;
                RelativeLayout.aimY = Math.floor(stage.stageHeight / 2 - RelativeLayout._height / 2) + marginY;
                break;
            case "top" :
            case "ct" :
                RelativeLayout.aimX = Math.floor(stage.stageWidth / 2 - RelativeLayout._width / 2) + marginX;
                RelativeLayout.aimY = marginY;
                break;
            case "right" :
            case "rm" :
                RelativeLayout.aimX = Math.floor(stage.stageWidth - RelativeLayout._width) - marginX;
                RelativeLayout.aimY = Math.floor(stage.stageHeight / 2 - RelativeLayout._height / 2) + marginY;
                break;
            case "bottom" :
            case "cb" :
                RelativeLayout.aimX = Math.floor(stage.stageWidth / 2 - RelativeLayout._width / 2) + marginX;
                RelativeLayout.aimY = Math.floor(stage.stageHeight - RelativeLayout._height) - marginY;
                break;
            case "left" :
            case "lm" :
                RelativeLayout.aimX = marginX;
                RelativeLayout.aimY = Math.floor(stage.stageHeight / 2 - RelativeLayout._height / 2) + marginY;
                break;
            case "righttop" :
            case "rt" :
                RelativeLayout.aimX = Math.floor(stage.stageWidth - RelativeLayout._width) - marginX;
                RelativeLayout.aimY = marginY;
                break;
            case "rightbottom" :
            case "rb" :
                RelativeLayout.aimX = Math.floor(stage.stageWidth - RelativeLayout._width) - marginX;
                RelativeLayout.aimY = Math.floor(stage.stageHeight - RelativeLayout._height) - marginY;
                break;
            case "leftbottom" :
            case "lb" :
                RelativeLayout.aimX = marginX;
                RelativeLayout.aimY = Math.floor(stage.stageHeight - RelativeLayout._height) - marginY;
                break;
            case "lefttop" :
            case "lt" :
            default :
                RelativeLayout.aimX = marginX;
                RelativeLayout.aimY = marginY;
                break;
        }
        RelativeLayout.point($scope, RelativeLayout.aimX, RelativeLayout.aimY);
    }
    public static function resize($scope:DisplayObject,w:uint=0,h:uint=0):void {
        if ($scope == null) {
            return;
        }
        RelativeLayout.setSize($scope,w,h);
        $scope.width = RelativeLayout._width;
        $scope.height = RelativeLayout._height;
    }
    public static function point($scope:DisplayObject,posX:int,posY:int):void {
        if ($scope == null) {
            return;
        }
        RelativeLayout.setPoint(posX, posY);
        $scope.x = RelativeLayout._x;
        $scope.y = RelativeLayout._y;
    }
    public static function rect($scope:DisplayObject,posX:int,posY:int,w:uint=0,h:uint=0):void {
        if ($scope == null) {
            return;
        }
        RelativeLayout.setPoint(posX, posY);
        RelativeLayout.setSize($scope,w,h);
        RelativeLayout.rectangle = new Rectangle(
          RelativeLayout._x,RelativeLayout._y,RelativeLayout._width,RelativeLayout._height
        );
        $scope.x = RelativeLayout.rectangle.x;
        $scope.y = RelativeLayout.rectangle.y;
        $scope.width = RelativeLayout.rectangle.width;
        $scope.height = RelativeLayout.rectangle.height;
    }
    private static function setSize($scope:DisplayObject,w:uint, h:uint):void {
        w ? RelativeLayout._width = w:RelativeLayout._width = $scope.width;
        h ? RelativeLayout._height = h:RelativeLayout._height = $scope.height;
    }
    private static function setPoint(posX:int,posY:int):void {
        RelativeLayout._x = posX;
        RelativeLayout._y = posY;
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AS3で不要になったインスタンスを削除しメモリを解放する「Cleaner」クラス]]></title>
    <link href="http://lab.dolice.net/blog/2013/03/13/as3-cleaner/"/>
    <updated>2013-03-13T18:57:00+09:00</updated>
    <id>http://lab.dolice.net/blog/2013/03/13/as3-cleaner</id>
    <content type="html"><![CDATA[<p>ActionScript3.0で不要になったインスタンスを削除しメモリを解放する「<a href="https://github.com/masakihirokawa/as3/blob/master/net/dolice/utils/Cleaner.as">Cleaner</a>」クラスを作成しました。</p>

<p>指定したオブジェクトの子を、任意の数まで削除します。新しい子から順番に削除するか、古い子から順番に削除するかの指定と、最後にオブジェクトへ nullを代入してメモリを解放するかの指定ができます。</p>

<h2>ファイル</h2>

<ul>
<li><a href="http://dolice.net/php/dlc/dlcount.php?fname=Cleaner.zip&dir=/sample/">サンプル</a></li>
<li><a href="https://github.com/masakihirokawa/as3/blob/master/net/dolice/utils/Cleaner.as">ダウンロード</a></li>
</ul>


<h2>使用方法</h2>

<ul>
<li><p><em>container(DisplayObjectContainer)の子を、古いものから順番に全て削除する
{% codeblock lang:as3 %}
Cleaner.deleteContainer(</em>container);
{% endcodeblock %}</p></li>
<li><p><em>mc(MovieClip)の子を、古いものから順番に全て削除し、最後に nullを代入する
{% codeblock lang:as3 %}
Cleaner.deleteMovieClip(</em>mc, 0, null);
{% endcodeblock %}</p></li>
<li><p><em>sp(Sprite)の子を、最後の1つを除いて新しいものから順番に削除する
{% codeblock lang:as3 %}
Cleaner.deleteSprite(</em>sp, 1, "null,undefined以外の文字列", true);
{% endcodeblock %}</p></li>
</ul>


<h2>パラメータ解説</h2>

<p><strong><em>container, </em>mc, _sp</strong></p>

<blockquote><p>子を削除するオブジェクト</p>

<p>[DisplayObjectContainer, MovieClip, Sprite][省略不可]</p></blockquote>

<p><strong>remainNum</strong></p>

<blockquote><p>幾つ子を残すか</p>

<p>[uint][規定値:0][省略可]</p></blockquote>

<p><strong>toNull</strong></p>

<blockquote><p>最後にオブジェクトに nullを代入する場合は、nullか undefinedを指定[String][規定値:"String as Null"*1][省略可]</p></blockquote>

<p><strong>isReverse</strong></p>

<blockquote><p>新しいもの／上から順番に削除するか</p>

<p>[Boolean][規定値:false][省略可]</p></blockquote>

<h2>ソースコード</h2>

<p>{% codeblock lang:as3 %}
package net.dolice.utils{</p>

<pre><code>import flash.display.DisplayObjectContainer;
import flash.display.MovieClip;
import flash.display.Sprite;
public class Cleaner {
    public static function deleteContainer(
      _container:DisplayObjectContainer,
      remainNum:uint=0,
      toNull:String="String as Null",
      isReverse:Boolean=false
    ):void {
        if (_container == null) {
            return;
        }
        if (isReverse) {
            while (_container.numChildren &gt; remainNum) {
                _container.removeChildAt(_container.numChildren - 1);
            }
        } else {
            while (_container.numChildren &gt; remainNum) {
                _container.removeChildAt(0);
            }
        }
        if (toNull == null) {
            _container = null;
        }
    }
    public static function deleteMovieClip(
      _mc:MovieClip,
      remainNum:uint=0,
      toNull:String="String as Null",
      isReverse:Boolean=false
    ):void {
        if (_mc == null) {
            return;
        }
        if (isReverse) {
            while (_mc.numChildren &gt; remainNum) {
                _mc.removeChildAt(_mc.numChildren - 1);
            }
        } else {
            while (_mc.numChildren &gt; remainNum) {
                _mc.removeChildAt(0);
            }
        }
        if (toNull == null) {
            _mc = null;
        }
    }
    public static function deleteSprite(
      _sp:Sprite,
      remainNum:uint=0,
      toNull:String="String as Null",
      isReverse:Boolean=false
    ):void {
        if (_sp == null) {
            return;
        }
        if (isReverse) {
            while (_sp.numChildren &gt; remainNum) {
                _sp.removeChildAt(_sp.numChildren - 1);
            }
        } else {
            while (_sp.numChildren &gt; remainNum) {
                _sp.removeChildAt(0);
            }
        }
        if (toNull == null) {
            _sp = null;
        }
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
