<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Category: NSObject | Dolice Lab]]></title>
  <link href="https://lab.dolice.net/blog/categories/nsobject/atom.xml" rel="self"/>
  <link href="https://lab.dolice.net/"/>
  <updated>2016-06-07T18:32:18+09:00</updated>
  <id>https://lab.dolice.net/</id>
  <author>
    <name><![CDATA[Masaki Hirokawa]]></name>
    <email><![CDATA[info@dolice.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-Cのクラスとプロトコルについて]]></title>
    <link href="https://lab.dolice.net/blog/2013/03/23/objc-class-protocol/"/>
    <updated>2013-03-23T11:36:00+09:00</updated>
    <id>https://lab.dolice.net/blog/2013/03/23/objc-class-protocol</id>
    <content type="html"><![CDATA[<p>クラスはオブジェクトの設計図にあたるもので、属性とメソッドで構成されています。</p>

<p>Objective-Cのクラスは以下のように宣言と実装が分かれています。</p>

<h2>クラス</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//クラスの宣言</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Hoge</span> : <span class="nc">NSObject</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//プロパティ</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//メソッド定義</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">foo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//クラスの実装</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Hoge</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@private</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//インスタンス変数</span>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">_number</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//メソッドの実装</span>
</span><span class='line'><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">foo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//処理</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>クラスからオブジェクトを生成して処理を実行</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Hogeクラスから hogeオブジェクトを生成する</span>
</span><span class='line'><span class="n">Hoge</span> <span class="o">*</span><span class="n">hoge</span> <span class="p">[[</span><span class="n">Hoge</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="c1">//メソッドの実行</span>
</span><span class='line'><span class="p">[</span><span class="n">hoge</span> <span class="n">foo</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>クラスの継承</h2>

<p>継承を使うと継承元の情報を引き継いで新しいクラスを作成することができます。</p>

<p>クラスを継承するには、ヘッダファイルに親クラスの指定を追加します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Hogeクラスを使用して Piyoクラスを作成</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Piyo</span> : <span class="nc">Hoge</span>
</span><span class='line'><span class="c1">//新たにメソッドを追加する</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bar</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//クラスの実装</span>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Piyo</span>
</span><span class='line'><span class="c1">//メソッドの実装</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">bar</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//処理</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>継承したメソッドの実行</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Piyoクラスから piyoオブジェクトを生成する</span>
</span><span class='line'><span class="n">Piyo</span> <span class="o">*</span><span class="n">piyo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Piyo</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="c1">//継承した strプロパティに値をセットする</span>
</span><span class='line'><span class="n">piyo</span><span class="p">.</span><span class="n">str</span> <span class="o">=</span> <span class="s">@&quot;test&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//継承したメソッドの実行</span>
</span><span class='line'><span class="p">[</span><span class="n">piyo</span> <span class="n">foo</span><span class="p">];</span>
</span><span class='line'><span class="c1">//Piyoクラス独自のメソッドを実行</span>
</span><span class='line'><span class="p">[</span><span class="n">piyo</span> <span class="n">bar</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>メソッドのオーバーライド</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Piyo</span> : <span class="nc">Hoge</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span> <span class="nc">Piyo</span>
</span><span class='line'><span class="c1">//親クラスのメソッドをオーバーライドする</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">//親クラスのメソッド呼び出し</span>
</span><span class='line'>  <span class="p">[</span><span class="n">super</span> <span class="n">foo</span><span class="p">];</span>
</span><span class='line'>  <span class="c1">//処理</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>プロトコル</h2>

<p>プロトコルはオブジェクトの振る舞いを表すメソッド群を宣言したものです。</p>

<p>プロトコルは以下のように「@protocol」指示子を使って宣言します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//インターフェースの宣言</span>
</span><span class='line'><span class="k">@protocol</span> <span class="nc">Hoge</span>
</span><span class='line'><span class="c1">//メソッドの定義</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>プロトコルの適合</h3>

<p>プロトコルで宣言されているメソッドはクラスが実装します。</p>

<p>ヘッダファイルにプロトコルの指定を追加します。プロトコルを使用してプロトコルで宣言されているメソッドをクラスに実装することを、プロトコルの適合と呼びます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//プロトコルの適合</span>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Piyo</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">Hoge</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">@implementation</span>
</span><span class='line'><span class="err">//プロトコルで宣言されているメソッドを実装する</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//処理</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>親クラスの指定の後に「&lt;>」で囲んで、適合するプロトコルを指定します。プロトコルが複数ある場合は「,」で区切ります。</p>

<p>Piyoクラスは Hogeプロトコルに適合しているため、以下のように Hogeプロトコルで宣言されている fooメソッドを呼び出すことができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//Piyoクラスから piyoオブジェクトを生成する</span>
</span><span class='line'><span class="n">Piyo</span> <span class="o">*</span><span class="n">piyo</span> <span class="p">[[</span><span class="n">Piyo</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="c1">//Hogeプロトコルで宣言されているメソッドを呼び出す</span>
</span><span class='line'><span class="p">[</span><span class="n">piyo</span> <span class="n">foo</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Objective-Cのクラスとプロトコルについての解説は以上になります。</p>

<h2>お薦めの参考書</h2>

<p><strong><a href="https://www.amazon.co.jp/gp/product/4797368276/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4797368276&linkCode=as2&tag=pinocchio-22">詳解 Objective-C 2.0 第3版</a></strong><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=pinocchio-22&l=as2&o=9&a=4797368276" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><br />
Objective-Cの基礎から応用までしっかりカバーされています。サンプルを打ち込んで動作させる入門書とは違いますが、Objective-C の全体像を掴むことができます。この本で基礎をしっかり固めることで、アプリのクオリティも大きく上がると思います。</p>
]]></content>
  </entry>
  
</feed>
